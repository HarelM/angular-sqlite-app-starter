{"ast":null,"code":"import _asyncToGenerator from \"/Users/queaujeanpierre/Development/latest/angular-sqlite-app-starter/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { schemaVersion1, dataVersion1, schemaVersion2, dataVersion2 } from '../utils/import-json-utils';\nimport { Dialog } from '@capacitor/dialog';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/sqlite.service\";\nimport * as i2 from \"../services/detail.service\";\nimport * as i3 from \"@ionic/angular\";\nexport let Testjson164Page = /*#__PURE__*/(() => {\n  class Testjson164Page {\n    constructor(_sqlite, _detailService) {\n      this._sqlite = _sqlite;\n      this._detailService = _detailService;\n      this.initPlugin = false;\n    }\n\n    ngAfterViewInit() {\n      var _this = this;\n\n      return _asyncToGenerator(function* () {\n        const showAlert = /*#__PURE__*/function () {\n          var _ref = _asyncToGenerator(function* (message) {\n            yield Dialog.alert({\n              title: 'Error Dialog',\n              message: message\n            });\n          });\n\n          return function showAlert(_x) {\n            return _ref.apply(this, arguments);\n          };\n        }();\n\n        try {\n          yield _this.runTest();\n          document.querySelector('.sql-allsuccess').classList.remove('display');\n          console.log(\"$$$ runTest was successful\");\n        } catch (err) {\n          document.querySelector('.sql-allfailure').classList.remove('display');\n          console.log(\"$$$ runTest failed\");\n          yield showAlert(err.message);\n        }\n      })();\n    }\n\n    runTest() {\n      var _this2 = this;\n\n      return _asyncToGenerator(function* () {\n        try {\n          let result = yield _this2._sqlite.echo(\"Hello World\"); // ************************************************\n          // Import Full Version 1 Schema Issue#164\n          // ************************************************\n          // test Json object validity\n\n          result = yield _this2._sqlite.isJsonValid(JSON.stringify(schemaVersion1));\n          console.log(`>>>> after isJsonValid ${result.result}`);\n\n          if (!result.result) {\n            return Promise.reject(new Error(\"IsJson failed\"));\n          } // full import\n\n\n          result = yield _this2._sqlite.importFromJson(JSON.stringify(schemaVersion1));\n          if (result.changes.changes === -1) return Promise.reject(new Error(\"ImportFromJson 'full' failed\")); // ************************************************\n          // Create Sync Table and Date\n          // ************************************************\n          // create the connection to the database\n\n          console.log(\"create SYNC Table and Date\");\n          let db = yield _this2._sqlite.createConnection(\"db-issue164\", false, \"no-encryption\", 1);\n          if (db === null) return Promise.reject(new Error(\"CreateConnection db-issue164 failed\")); // open db testNew\n\n          yield db.open(); // create synchronization table \n\n          result = yield db.createSyncTable();\n          if (result.changes.changes < 0) return Promise.reject(new Error(\"CreateSyncTable failed\"));\n          let syncDate = yield db.getSyncDate();\n          if (syncDate.length === 0) return Promise.reject(new Error(\"GetSyncDate failed\")); // close the connection\n\n          yield _this2._sqlite.closeConnection(\"db-issue164\");\n          console.log(\"closeConnection Version 1\"); // ************************************************\n          // Import Partial Version 1 Table data Issue#164\n          // ************************************************\n          // test Json object validity\n\n          result = yield _this2._sqlite.isJsonValid(JSON.stringify(dataVersion1));\n          console.log(`>>>> after isJsonValid ${result.result}`);\n\n          if (!result.result) {\n            return Promise.reject(new Error(\"IsJson failed\"));\n          } // partial import\n\n\n          result = yield _this2._sqlite.importFromJson(JSON.stringify(dataVersion1));\n          if (result.changes.changes === -1) return Promise.reject(new Error(\"ImportFromJson 'full' failed\"));\n          db = yield _this2._sqlite.createConnection(\"db-issue164\", false, \"no-encryption\", 1);\n          if (db === null) return Promise.reject(new Error(\"CreateConnection db-issue164 failed\")); // open db testNew\n\n          yield db.open(); // select all tables in db\n\n          let query = \"SELECT name FROM sqlite_master WHERE \";\n          query += \"type='table' AND name NOT LIKE 'sync_table' \";\n          query += \"AND name NOT LIKE '_temp_%' \";\n          query += \"AND name NOT LIKE 'sqlite_%' \";\n          query += \"ORDER BY rootpage DESC;\";\n          let ret = yield db.query(query);\n\n          if (ret.values.length !== 3 || ret.values[0].name !== \"images\" || ret.values[1].name !== \"messages\" || ret.values[2].name !== \"users\") {\n            return Promise.reject(new Error(\"Query Tables Version1 failed\"));\n          } // close the connection\n\n\n          yield _this2._sqlite.closeConnection(\"db-issue164\"); // ************************************************\n          // Import Full Version 2 Schema Issue#164\n          // ************************************************\n          // test Json object validity\n\n          result = yield _this2._sqlite.isJsonValid(JSON.stringify(schemaVersion2));\n          console.log(`>>>> after isJsonValid ${result.result}`);\n\n          if (!result.result) {\n            return Promise.reject(new Error(\"IsJson failed\"));\n          } // full import\n\n\n          result = yield _this2._sqlite.importFromJson(JSON.stringify(schemaVersion2));\n          if (result.changes.changes === -1) return Promise.reject(new Error(\"ImportFromJson 'full' failed\"));\n          db = yield _this2._sqlite.createConnection(\"db-issue164\", false, \"no-encryption\", 2);\n          if (db === null) return Promise.reject(new Error(\"CreateConnection db-issue164 failed\")); // open db testNew\n\n          yield db.open(); // create synchronization table \n\n          result = yield db.createSyncTable();\n          if (result.changes.changes < 0) return Promise.reject(new Error(\"CreateSyncTable failed\"));\n          syncDate = yield db.getSyncDate();\n          if (syncDate.length === 0) return Promise.reject(new Error(\"GetSyncDate failed\")); // close the connection\n\n          yield _this2._sqlite.closeConnection(\"db-issue164\");\n          console.log(\"closeConnection Version 2\"); // ************************************************\n          // Import Partial Version 2 Table data Issue#164\n          // ************************************************\n          // test Json object validity\n\n          result = yield _this2._sqlite.isJsonValid(JSON.stringify(dataVersion2));\n          console.log(`>>>> after isJsonValid ${result.result}`);\n\n          if (!result.result) {\n            return Promise.reject(new Error(\"IsJson failed\"));\n          } // partial import\n\n\n          result = yield _this2._sqlite.importFromJson(JSON.stringify(dataVersion2));\n          if (result.changes.changes === -1) return Promise.reject(new Error(\"ImportFromJson 'full' failed\"));\n          db = yield _this2._sqlite.createConnection(\"db-issue164\", false, \"no-encryption\", 2);\n          if (db === null) return Promise.reject(new Error(\"CreateConnection db-issue164 failed\")); // open db testNew\n\n          yield db.open(); // select all tables in db\n\n          query = \"SELECT name FROM sqlite_master WHERE \";\n          query += \"type='table' AND name NOT LIKE 'sync_table' \";\n          query += \"AND name NOT LIKE '_temp_%' \";\n          query += \"AND name NOT LIKE 'sqlite_%' \";\n          query += \"ORDER BY rootpage DESC;\";\n          ret = yield db.query(query);\n\n          if (ret.values.length !== 2 || ret.values[0].name !== \"messages\" || ret.values[1].name !== \"users\") {\n            return Promise.reject(new Error(\"Query Tables Version2 failed\"));\n          } // close the connection\n\n\n          yield _this2._sqlite.closeConnection(\"db-issue164\");\n        } catch (err) {\n          return Promise.reject(err);\n        }\n      })();\n    }\n\n  }\n\n  Testjson164Page.ɵfac = function Testjson164Page_Factory(t) {\n    return new (t || Testjson164Page)(i0.ɵɵdirectiveInject(i1.SQLiteService), i0.ɵɵdirectiveInject(i2.DetailService));\n  };\n\n  Testjson164Page.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: Testjson164Page,\n    selectors: [[\"app-testjson164\"]],\n    decls: 19,\n    vars: 2,\n    consts: [[3, \"translucent\"], [\"slot\", \"start\"], [\"defaultHref\", \"/\"], [3, \"fullscreen\"], [\"collapse\", \"condense\"], [\"size\", \"large\"], [\"id\", \"container\"], [1, \"card-sqlite\"], [1, \"sql-allsuccess\", \"display\"], [1, \"sql-allfailure\", \"display\"]],\n    template: function Testjson164Page_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"ion-header\", 0);\n        i0.ɵɵelementStart(1, \"ion-toolbar\");\n        i0.ɵɵelementStart(2, \"ion-buttons\", 1);\n        i0.ɵɵelement(3, \"ion-back-button\", 2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"ion-title\");\n        i0.ɵɵtext(5, \" TestJson#164 \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"ion-content\", 3);\n        i0.ɵɵelementStart(7, \"ion-header\", 4);\n        i0.ɵɵelementStart(8, \"ion-toolbar\");\n        i0.ɵɵelementStart(9, \"ion-title\", 5);\n        i0.ɵɵtext(10, \"TestJson#164\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(11, \"div\", 6);\n        i0.ɵɵelementStart(12, \"ion-card\", 7);\n        i0.ɵɵelementStart(13, \"ion-card-title\");\n        i0.ɵɵtext(14, \" Results of refactor sqlite test \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(15, \"p\", 8);\n        i0.ɵɵtext(16, \" The set of tests was successful \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(17, \"p\", 9);\n        i0.ɵɵtext(18, \" The set of tests failed \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"translucent\", true);\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"fullscreen\", true);\n      }\n    },\n    directives: [i3.IonHeader, i3.IonToolbar, i3.IonButtons, i3.IonBackButton, i3.IonBackButtonDelegate, i3.IonTitle, i3.IonContent, i3.IonCard, i3.IonCardTitle],\n    styles: [\"#container[_ngcontent-%COMP%]{text-align:center;position:relative;left:0;right:0;top:5%}#container[_ngcontent-%COMP%]   strong[_ngcontent-%COMP%]{font-size:20px;line-height:26px}.display[_ngcontent-%COMP%]{display:none}.card-sqlite[_ngcontent-%COMP%]{padding:0 1rem}ion-card[_ngcontent-%COMP%]   p[_ngcontent-%COMP%]{font-size:1rem}ion-card[_ngcontent-%COMP%]{--background: var(--ion-background-color);--color: var(--ion-text-color)}\"]\n  });\n  return Testjson164Page;\n})();","map":null,"metadata":{},"sourceType":"module"}