{"ast":null,"code":"import _asyncToGenerator from \"/Users/queaujeanpierre/Development/latest/angular-sqlite-app-starter/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { createSchema, twoUsers, createSchemaArticles } from '../utils/test-json1-utils';\nimport { deleteDatabase } from '../utils/db-utils';\nimport { Dialog } from '@capacitor/dialog';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/sqlite.service\";\nimport * as i2 from \"../services/detail.service\";\nimport * as i3 from \"@ionic/angular\";\nexport let TestJson1ExtensionPage = /*#__PURE__*/(() => {\n  class TestJson1ExtensionPage {\n    constructor(_sqlite, _detailService) {\n      this._sqlite = _sqlite;\n      this._detailService = _detailService;\n      this.detail = false;\n      this.initPlugin = false;\n    }\n\n    ngAfterViewInit() {\n      var _this = this;\n\n      return _asyncToGenerator(function* () {\n        const showAlert = /*#__PURE__*/function () {\n          var _ref = _asyncToGenerator(function* (message) {\n            yield Dialog.alert({\n              title: 'Error Dialog',\n              message: message\n            });\n          });\n\n          return function showAlert(_x) {\n            return _ref.apply(this, arguments);\n          };\n        }();\n\n        try {\n          const res = yield _this.loadJSON('assets/jsonFiles/test-json1.json');\n          console.log(`res ${res}`);\n          _this.dataArticles = JSON.parse(res);\n          yield _this.runTest();\n          document.querySelector('.sql-allsuccess').classList.remove('display');\n          console.log(\"$$$ runTest was successful\");\n        } catch (err) {\n          document.querySelector('.sql-allfailure').classList.remove('display');\n          console.log(`$$$ runTest failed ${err.message}`);\n          yield showAlert(err.message);\n        }\n      })();\n    }\n\n    runTest() {\n      var _this2 = this;\n\n      return _asyncToGenerator(function* () {\n        try {\n          let result = yield _this2._sqlite.echo(\"Hello World\"); // initialize the connection\n\n          let db;\n\n          if ((yield _this2._sqlite.isConnection(\"testJSON1\")).result) {\n            db = yield _this2._sqlite.retrieveConnection(\"testJSON1\");\n          } else db = yield _this2._sqlite.createConnection(\"testJSON1\", false, \"no-encryption\", 1); // check if the databases exist \n          // and delete it for multiple successive tests\n\n\n          yield deleteDatabase(db); // open db testNew\n\n          yield db.open(); // create tables in db\n\n          let ret = yield db.execute(createSchema, false);\n\n          if (ret.changes.changes < 0) {\n            return Promise.reject(new Error(\"Execute createSchema failed\"));\n          } // create synchronization table \n\n\n          ret = yield db.createSyncTable(); // set the synchronization date\n\n          const syncDate = \"2020-11-25T08:30:25.000Z\";\n          yield db.setSyncDate(syncDate); // add first users in db\n\n          ret = yield db.execute(twoUsers);\n\n          if (ret.changes.changes !== 2) {\n            return Promise.reject(new Error(\"Execute 2 users failed\"));\n          } // select all users in db\n\n\n          ret = yield db.query(\"SELECT * FROM users;\");\n\n          if (ret.values.length !== 2 || ret.values[0].name !== \"Jones\" || ret.values[1].name !== \"Jeep\") {\n            return Promise.reject(new Error(\"Query 1 users failed\"));\n          }\n\n          ret = yield db.query(\"SELECT json_extract(users.phone, '$.cell') FROM users;\");\n\n          if (ret.values.length !== 2 || ret.values[0][\"json_extract(users.phone, '$.cell')\"] !== \"+34712345678\" || ret.values[1][\"json_extract(users.phone, '$.cell')\"] !== \"+33912345678\") {\n            return Promise.reject(new Error(\"Query User's cell phone failed\"));\n          }\n\n          console.log(`ret.values ${JSON.stringify(ret.values)}`);\n          console.log(`ret.values[0]  ${ret.values[0][\"json_extract(users.phone, '$.cell')\"]}}`);\n          console.log(`ret.values[1]  ${ret.values[1][\"json_extract(users.phone, '$.cell')\"]}`);\n          ret = yield db.query(`SELECT DISTINCT users.name FROM users,\n            json_each(users.phone) WHERE json_each.value LIKE '+33%';`);\n\n          if (ret.values.length !== 1 || ret.values[0].name !== \"Jeep\") {\n            return Promise.reject(new Error(\"Query Users where Phone starts with +33 failed\"));\n          }\n\n          ret = yield db.run(`UPDATE users SET phone = json_replace(users.phone, '$.cell', \"+33612567834\") WHERE users.name = \"Jeep\";`, []);\n          /*,\n                json_replace(users.phone, '$.cell', \"+33612567834\");*/\n\n          console.log(`ret ${JSON.stringify(ret)}`);\n          ret = yield db.query(\"SELECT json_extract(users.phone, '$.cell') FROM users WHERE users.name = 'Jeep';\");\n\n          if (ret.values.length !== 1 || ret.values[0][\"json_extract(users.phone, '$.cell')\"] !== \"+33612567834\") {\n            return Promise.reject(new Error(\"Query User's cell phone failed\"));\n          }\n\n          ret = yield db.query(\"SELECT json_extract(users.phone, '$.cell') FROM users;\");\n\n          if (ret.values.length !== 2 || ret.values[0][\"json_extract(users.phone, '$.cell')\"] !== \"+34712345678\" || ret.values[1][\"json_extract(users.phone, '$.cell')\"] !== \"+33612567834\") {\n            return Promise.reject(new Error(\"Query User's cell phone failed\"));\n          }\n\n          result = yield _this2._sqlite.isConnection(\"testJSON1\");\n\n          if (result.result) {\n            // close the connection testJSON1\n            yield _this2._sqlite.closeConnection(\"testJSON1\");\n          } // test Articles\n          // initialize the connection\n\n\n          let db1;\n\n          if ((yield _this2._sqlite.isConnection(\"Articles\")).result) {\n            db1 = yield _this2._sqlite.retrieveConnection(\"Articles\");\n          } else db1 = yield _this2._sqlite.createConnection(\"Articles\", false, \"no-encryption\", 1);\n\n          console.log(`after create Connection Articles`); // check if the databases exist \n          // and delete it for multiple successive tests\n\n          yield deleteDatabase(db1); // open db testNew\n\n          yield db1.open(); // create tables in db1\n\n          ret = yield db1.execute(createSchemaArticles, false);\n          console.log(`createSchemaArticles ret.changes.changes ${ret.changes.changes}`);\n\n          if (ret.changes.changes < 0) {\n            return Promise.reject(new Error(\"Execute createSchemaArticles failed\"));\n          } // create synchronization table \n\n\n          ret = yield db1.createSyncTable();\n          console.log(`createSyncTable JSON.stringify(ret) ${JSON.stringify(ret)}`); // set the synchronization date\n\n          const syncDate1 = \"2021-08-12T08:30:25.000Z\";\n          yield db1.setSyncDate(syncDate1);\n          console.log(`after setSyncDate `);\n\n          for (const data of _this2.dataArticles.articles) {\n            let stmt1 = `INSERT INTO articles (data) VALUES (json('${JSON.stringify(data)}'));`;\n            console.log(`stmt1 ${stmt1}`);\n            ret = yield db1.run(stmt1, []);\n            console.log(`run ret.changes.changes ${ret.changes.changes}`);\n          }\n\n          ret = yield db1.query(\"SELECT json_extract(articles.data, '$.title') FROM articles;\");\n          let stmt = \"SELECT json_extract(articles.data, '$.title') AS title \";\n          stmt += \"FROM articles ORDER BY json_extract(articles.data, '$.title') LIMIT 5;\";\n          ret = yield db1.query(stmt);\n\n          if (ret.values.length !== 5 || ret.values[0].title.substring(0, 17) !== \"A Tour of Tagging\" || ret.values[1].title.substring(0, 17) !== \"Alternative Redis\" || ret.values[2].title.substring(0, 17) !== \"Building the SQLi\" || ret.values[3].title.substring(0, 17) !== \"Connor Thomas Lei\" || ret.values[4].title.substring(0, 17) !== \"Extending SQLite \") {\n            return Promise.reject(new Error(\"Query User's cell phone failed\"));\n          }\n\n          result = yield _this2._sqlite.isConnection(\"Articles\");\n\n          if (result.result) {\n            // close the connection tArticles\n            yield _this2._sqlite.closeConnection(\"Articles\");\n          }\n\n          return Promise.resolve();\n        } catch (err) {\n          return Promise.reject(err);\n        }\n      })();\n    }\n\n    loadJSON(jsonFileName) {\n      return _asyncToGenerator(function* () {\n        return new Promise((resolve, reject) => {\n          var xobj = new XMLHttpRequest();\n          xobj.overrideMimeType(\"application/json\");\n          xobj.open('GET', jsonFileName, true);\n\n          xobj.onerror = () => {\n            reject(`LoadJSON: failed`);\n          };\n\n          xobj.onreadystatechange = function () {\n            if (xobj.readyState == 4 && xobj.status == 200) {\n              // Required use of an anonymous callback as .open will NOT return a value but simply returns undefined in asynchronous mode\n              resolve(xobj.responseText);\n            }\n          };\n\n          xobj.send(null);\n        });\n      })();\n    }\n\n  }\n\n  TestJson1ExtensionPage.ɵfac = function TestJson1ExtensionPage_Factory(t) {\n    return new (t || TestJson1ExtensionPage)(i0.ɵɵdirectiveInject(i1.SQLiteService), i0.ɵɵdirectiveInject(i2.DetailService));\n  };\n\n  TestJson1ExtensionPage.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: TestJson1ExtensionPage,\n    selectors: [[\"app-testjson1extension\"]],\n    decls: 19,\n    vars: 2,\n    consts: [[3, \"translucent\"], [\"slot\", \"start\"], [\"defaultHref\", \"/\"], [3, \"fullscreen\"], [\"collapse\", \"condense\"], [\"size\", \"large\"], [\"id\", \"container\"], [1, \"card-sqlite\"], [1, \"sql-allsuccess\", \"display\"], [1, \"sql-allfailure\", \"display\"]],\n    template: function TestJson1ExtensionPage_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"ion-header\", 0);\n        i0.ɵɵelementStart(1, \"ion-toolbar\");\n        i0.ɵɵelementStart(2, \"ion-buttons\", 1);\n        i0.ɵɵelement(3, \"ion-back-button\", 2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"ion-title\");\n        i0.ɵɵtext(5, \" TestJson1Extension \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"ion-content\", 3);\n        i0.ɵɵelementStart(7, \"ion-header\", 4);\n        i0.ɵɵelementStart(8, \"ion-toolbar\");\n        i0.ɵɵelementStart(9, \"ion-title\", 5);\n        i0.ɵɵtext(10, \"TestJson1Extension\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(11, \"div\", 6);\n        i0.ɵɵelementStart(12, \"ion-card\", 7);\n        i0.ɵɵelementStart(13, \"ion-card-title\");\n        i0.ɵɵtext(14, \" Results of refactor sqlite test \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(15, \"p\", 8);\n        i0.ɵɵtext(16, \" The set of tests was successful \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(17, \"p\", 9);\n        i0.ɵɵtext(18, \" The set of tests failed \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"translucent\", true);\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"fullscreen\", true);\n      }\n    },\n    directives: [i3.IonHeader, i3.IonToolbar, i3.IonButtons, i3.IonBackButton, i3.IonBackButtonDelegate, i3.IonTitle, i3.IonContent, i3.IonCard, i3.IonCardTitle],\n    styles: [\"#container[_ngcontent-%COMP%]{text-align:center;position:relative;left:0;right:0;top:5%}#container[_ngcontent-%COMP%]   strong[_ngcontent-%COMP%]{font-size:20px;line-height:26px}.display[_ngcontent-%COMP%]{display:none}.card-sqlite[_ngcontent-%COMP%]{padding:0 1rem}ion-card[_ngcontent-%COMP%]   p[_ngcontent-%COMP%]{font-size:1rem}ion-card[_ngcontent-%COMP%]{--background: var(--ion-background-color);--color: var(--ion-text-color)}\"]\n  });\n  return TestJson1ExtensionPage;\n})();","map":null,"metadata":{},"sourceType":"module"}