{"ast":null,"code":"import _asyncToGenerator from \"/Users/queaujeanpierre/Development/latest/angular-sqlite-app-starter/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { createSchema, twoUsers } from '../utils/no-encryption-utils';\nimport { deleteDatabase } from '../utils/db-utils';\nimport { Dialog } from '@capacitor/dialog';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/sqlite.service\";\nimport * as i2 from \"@ionic/angular\";\nexport let TestencryptionPage = /*#__PURE__*/(() => {\n  class TestencryptionPage {\n    constructor(_sqlite) {\n      this._sqlite = _sqlite;\n      this.initPlugin = false;\n    }\n\n    ngAfterViewInit() {\n      var _this = this;\n\n      return _asyncToGenerator(function* () {\n        const showAlert = /*#__PURE__*/function () {\n          var _ref = _asyncToGenerator(function* (message) {\n            yield Dialog.alert({\n              title: 'Error Dialog',\n              message: message\n            });\n          });\n\n          return function showAlert(_x) {\n            return _ref.apply(this, arguments);\n          };\n        }();\n\n        try {\n          yield _this.runTest();\n          document.querySelector('.sql-allsuccess').classList.remove('display');\n          console.log(\"$$$ runTest was successful\");\n        } catch (err) {\n          document.querySelector('.sql-allfailure').classList.remove('display');\n          console.log(`$$$ runTest failed ${err.message}`);\n          yield showAlert(err.message);\n        }\n      })();\n    }\n\n    runTest() {\n      var _this2 = this;\n\n      return _asyncToGenerator(function* () {\n        try {\n          let result = yield _this2._sqlite.echo(\"Hello World\"); // ************************************************\n          // Create Database No Encryption\n          // ************************************************\n          // initialize the connection\n\n          let db = yield _this2._sqlite.createConnection(\"testEncryption\", false, \"no-encryption\", 1); // open db testEncryption\n\n          yield db.open(); // create tables in db\n\n          let ret = yield db.execute(createSchema);\n\n          if (ret.changes.changes < 0) {\n            return Promise.reject(new Error(\"Execute createSchema failed\"));\n          } // create synchronization table \n\n\n          ret = yield db.createSyncTable();\n\n          if (ret.changes.changes < 0) {\n            return Promise.reject(new Error(\"Execute createSyncTable failed\"));\n          } // set the synchronization date\n\n\n          const syncDate = \"2020-11-25T08:30:25.000Z\";\n          yield db.setSyncDate(syncDate); // add two users in db\n\n          ret = yield db.execute(twoUsers);\n\n          if (ret.changes.changes !== 2) {\n            return Promise.reject(new Error(\"Execute twoUsers failed\"));\n          } // select all users in db\n\n\n          ret = yield db.query(\"SELECT * FROM users;\");\n\n          if (ret.values.length !== 2 || ret.values[0].name !== \"Whiteley\" || ret.values[1].name !== \"Jones\") {\n            return Promise.reject(new Error(\"Query1 twoUsers failed\"));\n          } // select users where company is NULL in db\n\n\n          ret = yield db.query(\"SELECT * FROM users WHERE company IS NULL;\");\n\n          if (ret.values.length !== 2 || ret.values[0].name !== \"Whiteley\" || ret.values[1].name !== \"Jones\") {\n            return Promise.reject(new Error(\"Query2 Users where Company null failed\"));\n          } // add one user with statement and values              \n\n\n          let sqlcmd = \"INSERT INTO users (name,email,age) VALUES (?,?,?)\";\n          let values = [\"Simpson\", \"Simpson@example.com\", 69];\n          ret = yield db.run(sqlcmd, values);\n\n          if (ret.changes.lastId !== 3) {\n            return Promise.reject(new Error(\"Run1 add 1 User failed\"));\n          } // add one user with statement              \n\n\n          sqlcmd = `INSERT INTO users (name,email,age) VALUES ` + `(\"Brown\",\"Brown@example.com\",15)`;\n          ret = yield db.run(sqlcmd);\n\n          if (ret.changes.lastId !== 4) {\n            return Promise.reject(new Error(\"Run2 add 1 User failed\"));\n          }\n\n          yield _this2._sqlite.closeConnection(\"testEncryption\"); // ************************************************\n          // Encrypt the existing database\n          // ************************************************\n          // initialize the connection\n\n          db = yield _this2._sqlite.createConnection(\"testEncryption\", true, \"encryption\", 1); // open db testEncryption\n\n          yield db.open(); // close the connection\n\n          yield _this2._sqlite.closeConnection(\"testEncryption\"); // ************************************************\n          // Work with the encrypted  database\n          // ************************************************\n          // initialize the connection\n\n          db = yield _this2._sqlite.createConnection(\"testEncryption\", true, \"secret\", 1); // open db testEncryption\n\n          yield db.open(); // add one user with statement and values              \n\n          sqlcmd = \"INSERT INTO users (name,email,age) VALUES (?,?,?)\";\n          values = [\"Jackson\", \"Jackson@example.com\", 32];\n          ret = yield db.run(sqlcmd, values);\n\n          if (ret.changes.lastId !== 5) {\n            return Promise.reject(new Error(\"Run3 add 1 User failed\"));\n          } // select all users in db\n\n\n          ret = yield db.query(\"SELECT * FROM users;\");\n\n          if (ret.values.length !== 5 || ret.values[0].name !== \"Whiteley\" || ret.values[1].name !== \"Jones\" || ret.values[2].name !== \"Simpson\" || ret.values[3].name !== \"Brown\" || ret.values[4].name !== \"Jackson\") {\n            return Promise.reject(new Error(\"Query3  5 Users failed\"));\n          } // delete it for multiple successive tests\n\n\n          yield deleteDatabase(db);\n          yield _this2._sqlite.closeConnection(\"testEncryption\");\n          return Promise.resolve();\n        } catch (err) {\n          return Promise.reject(err);\n        }\n      })();\n    }\n\n  }\n\n  TestencryptionPage.ɵfac = function TestencryptionPage_Factory(t) {\n    return new (t || TestencryptionPage)(i0.ɵɵdirectiveInject(i1.SQLiteService));\n  };\n\n  TestencryptionPage.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: TestencryptionPage,\n    selectors: [[\"app-testencryption\"]],\n    decls: 19,\n    vars: 2,\n    consts: [[3, \"translucent\"], [\"slot\", \"start\"], [\"defaultHref\", \"/\"], [3, \"fullscreen\"], [\"collapse\", \"condense\"], [\"size\", \"large\"], [\"id\", \"container\"], [1, \"card-sqlite\"], [1, \"sql-allsuccess\", \"display\"], [1, \"sql-allfailure\", \"display\"]],\n    template: function TestencryptionPage_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"ion-header\", 0);\n        i0.ɵɵelementStart(1, \"ion-toolbar\");\n        i0.ɵɵelementStart(2, \"ion-buttons\", 1);\n        i0.ɵɵelement(3, \"ion-back-button\", 2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"ion-title\");\n        i0.ɵɵtext(5, \" Testencryption \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"ion-content\", 3);\n        i0.ɵɵelementStart(7, \"ion-header\", 4);\n        i0.ɵɵelementStart(8, \"ion-toolbar\");\n        i0.ɵɵelementStart(9, \"ion-title\", 5);\n        i0.ɵɵtext(10, \"Testencryption\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(11, \"div\", 6);\n        i0.ɵɵelementStart(12, \"ion-card\", 7);\n        i0.ɵɵelementStart(13, \"ion-card-title\");\n        i0.ɵɵtext(14, \" Results of refactor sqlite test \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(15, \"p\", 8);\n        i0.ɵɵtext(16, \" The set of tests was successful \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(17, \"p\", 9);\n        i0.ɵɵtext(18, \" The set of tests failed \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"translucent\", true);\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"fullscreen\", true);\n      }\n    },\n    directives: [i2.IonHeader, i2.IonToolbar, i2.IonButtons, i2.IonBackButton, i2.IonBackButtonDelegate, i2.IonTitle, i2.IonContent, i2.IonCard, i2.IonCardTitle],\n    styles: [\"#container[_ngcontent-%COMP%]{text-align:center;position:relative;left:0;right:0;top:5%}#container[_ngcontent-%COMP%]   strong[_ngcontent-%COMP%]{font-size:20px;line-height:26px}.display[_ngcontent-%COMP%]{display:none}.card-sqlite[_ngcontent-%COMP%]{padding:0 1rem}ion-card[_ngcontent-%COMP%]   p[_ngcontent-%COMP%]{font-size:1rem}ion-card[_ngcontent-%COMP%]{--background: var(--ion-background-color);--color: var(--ion-text-color)}\"]\n  });\n  return TestencryptionPage;\n})();","map":null,"metadata":{},"sourceType":"module"}