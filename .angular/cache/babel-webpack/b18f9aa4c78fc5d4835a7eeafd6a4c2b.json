{"ast":null,"code":"import _asyncToGenerator from \"/Users/queaujeanpierre/Development/latest/angular-sqlite-app-starter/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { Dialog } from '@capacitor/dialog';\nimport { dataToImport94 } from '../utils/import-json-utils';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/sqlite.service\";\nimport * as i2 from \"../services/detail.service\";\nimport * as i3 from \"@ionic/angular\";\nexport let TestChangeSecureSecretPage = /*#__PURE__*/(() => {\n  class TestChangeSecureSecretPage {\n    constructor(_sqlite, _detailService) {\n      this._sqlite = _sqlite;\n      this._detailService = _detailService;\n      this.detail = false;\n      this.initPlugin = false;\n    }\n\n    ngAfterViewInit() {\n      var _this = this;\n\n      return _asyncToGenerator(function* () {\n        _this.showAlert = /*#__PURE__*/function () {\n          var _ref = _asyncToGenerator(function* (message) {\n            yield Dialog.alert({\n              title: 'Error Dialog',\n              message: message\n            });\n          });\n\n          return function (_x) {\n            return _ref.apply(this, arguments);\n          };\n        }();\n\n        console.log(\"%%%% in TestChangeSecureSecretPage this._sqlite \" + _this._sqlite);\n\n        try {\n          yield _this.runTest();\n          document.querySelector('.sql-allsuccess').classList.remove('display');\n          console.log(\"$$$ runTest was successful\");\n        } catch (err) {\n          document.querySelector('.sql-allfailure').classList.remove('display');\n          console.log(`$$$ runTest failed ${err.message}`);\n          yield _this.showAlert(err.message);\n        }\n      })();\n    }\n\n    runTest() {\n      var _this2 = this;\n\n      return _asyncToGenerator(function* () {\n        try {\n          let result = yield _this2._sqlite.echo(\"Hello World\");\n          /*\n                await this._sqlite.changeEncryptionSecret('how million space by locate',\n                                                          'abbey clammy gird night test');\n          */\n\n          yield _this2._sqlite.changeEncryptionSecret('abbey clammy gird night test', 'how million space by locate'); // initialize the connection\n\n          const db = yield _this2._sqlite.createConnection(\"testNew\", false, \"no-encryption\", 1);\n          const db1 = yield _this2._sqlite.createConnection(\"testSet\", true, \"secret\", 1); // open db testNew\n\n          yield db.open(); // open db testSet\n\n          yield db1.open(); // select all users in db\n\n          let ret = yield db.query(\"SELECT * FROM users;\");\n\n          if (ret.values.length !== 7) {\n            return Promise.reject(new Error(`Query 1 users all failed ${ret.values.length}`));\n          } // select users where age is NULL in db\n\n\n          ret = yield db.query(\"SELECT * FROM users WHERE age IS NULL;\");\n\n          if (ret.values.length !== 1 || ret.values[0].name !== \"Bush\") {\n            return Promise.reject(new Error(\"Query 2 users where age is null failed\"));\n          } // select all test56 in db\n\n\n          ret = yield db.query(\"SELECT * FROM test56;\");\n\n          if (ret.values.length !== 6) {\n            return Promise.reject(new Error(\"Query 3 test56 all failed\"));\n          } // select all contacts in db\n\n\n          ret = yield db1.query(\"SELECT * FROM contacts;\");\n\n          if (ret.values.length !== 4) {\n            return Promise.reject(new Error(\"Query 4 contacts all failed\"));\n          } // create an encrypted database from json object\n\n\n          let jsObj = dataToImport94;\n          jsObj.database = \"json-encrypted\";\n          jsObj.encrypted = true; // test Json object validity\n\n          result = yield _this2._sqlite.isJsonValid(JSON.stringify(jsObj));\n\n          if (!result.result) {\n            return Promise.reject(new Error(\"IsJson failed\"));\n          } // full import\n\n\n          result = yield _this2._sqlite.importFromJson(JSON.stringify(jsObj));\n          if (result.changes.changes === -1) return Promise.reject(new Error(\"ImportFromJson 'full' failed\")); // create the connection to the database\n\n          const db3 = yield _this2._sqlite.createConnection(\"json-encrypted\", true, \"secret\", 1);\n          if (db3 === null) return Promise.reject(new Error(\"CreateConnection json-encrypted failed\")); // open db json-encrypted\n\n          yield db3.open(); // create synchronization table \n\n          result = yield db3.createSyncTable();\n          if (result.changes.changes < 0) return Promise.reject(new Error(\"CreateSyncTable failed\"));\n          const syncDate = yield db3.getSyncDate();\n          if (syncDate.length === 0) return Promise.reject(new Error(\"GetSyncDate failed\")); // select all reps in db\n\n          ret = yield db3.query(\"SELECT * FROM reps;\");\n\n          if (ret.values.length !== 3) {\n            return Promise.reject(new Error(\"Query 5 reps all failed\"));\n          }\n\n          ret = yield _this2._sqlite.checkConnectionsConsistency();\n          var retDict = yield _this2._sqlite.retrieveAllConnections();\n          /*      for (var conn in retDict) {\n                  console.log(`connection: ${conn}`)\n                }\n          */\n          // close all connections\n\n          yield _this2._sqlite.closeAllConnections();\n          return Promise.resolve();\n        } catch (err) {\n          return Promise.reject(err);\n        }\n      })();\n    }\n\n  }\n\n  TestChangeSecureSecretPage.ɵfac = function TestChangeSecureSecretPage_Factory(t) {\n    return new (t || TestChangeSecureSecretPage)(i0.ɵɵdirectiveInject(i1.SQLiteService), i0.ɵɵdirectiveInject(i2.DetailService));\n  };\n\n  TestChangeSecureSecretPage.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: TestChangeSecureSecretPage,\n    selectors: [[\"app-testchangesecuresecret\"]],\n    decls: 19,\n    vars: 2,\n    consts: [[3, \"translucent\"], [\"slot\", \"start\"], [\"defaultHref\", \"/\"], [3, \"fullscreen\"], [\"collapse\", \"condense\"], [\"size\", \"large\"], [\"id\", \"container\"], [1, \"card-sqlite\"], [1, \"sql-allsuccess\", \"display\"], [1, \"sql-allfailure\", \"display\"]],\n    template: function TestChangeSecureSecretPage_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"ion-header\", 0);\n        i0.ɵɵelementStart(1, \"ion-toolbar\");\n        i0.ɵɵelementStart(2, \"ion-buttons\", 1);\n        i0.ɵɵelement(3, \"ion-back-button\", 2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"ion-title\");\n        i0.ɵɵtext(5, \" TestChangeSecureSecret \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"ion-content\", 3);\n        i0.ɵɵelementStart(7, \"ion-header\", 4);\n        i0.ɵɵelementStart(8, \"ion-toolbar\");\n        i0.ɵɵelementStart(9, \"ion-title\", 5);\n        i0.ɵɵtext(10, \"TestChangeSecureSecret\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(11, \"div\", 6);\n        i0.ɵɵelementStart(12, \"ion-card\", 7);\n        i0.ɵɵelementStart(13, \"ion-card-title\");\n        i0.ɵɵtext(14, \" Results of refactor sqlite test \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(15, \"p\", 8);\n        i0.ɵɵtext(16, \" The set of tests was successful \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(17, \"p\", 9);\n        i0.ɵɵtext(18, \" The set of tests failed \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"translucent\", true);\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"fullscreen\", true);\n      }\n    },\n    directives: [i3.IonHeader, i3.IonToolbar, i3.IonButtons, i3.IonBackButton, i3.IonBackButtonDelegate, i3.IonTitle, i3.IonContent, i3.IonCard, i3.IonCardTitle],\n    styles: [\"#container[_ngcontent-%COMP%]{text-align:center;position:relative;left:0;right:0;top:5%}#container[_ngcontent-%COMP%]   strong[_ngcontent-%COMP%]{font-size:20px;line-height:26px}.display[_ngcontent-%COMP%]{display:none}.card-sqlite[_ngcontent-%COMP%]{padding:0 1rem}ion-card[_ngcontent-%COMP%]   p[_ngcontent-%COMP%]{font-size:1rem}ion-card[_ngcontent-%COMP%]{--background: var(--ion-background-color);--color: var(--ion-text-color)}\"]\n  });\n  return TestChangeSecureSecretPage;\n})();","map":null,"metadata":{},"sourceType":"module"}