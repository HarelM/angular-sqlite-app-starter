{"ast":null,"code":"import _asyncToGenerator from \"/Users/queaujeanpierre/Development/latest/angular-sqlite-app-starter/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { dataToImport, partialImport1, partialImport2, partialImport3 } from '../utils/import-json-utils';\nimport { Dialog } from '@capacitor/dialog';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/sqlite.service\";\nimport * as i2 from \"../services/detail.service\";\nimport * as i3 from \"@ionic/angular\";\nexport let TestimportjsonPage = /*#__PURE__*/(() => {\n  class TestimportjsonPage {\n    constructor(_sqlite, _detailService) {\n      this._sqlite = _sqlite;\n      this._detailService = _detailService;\n      this.initPlugin = false;\n    }\n\n    ngAfterViewInit() {\n      var _this = this;\n\n      return _asyncToGenerator(function* () {\n        const showAlert = /*#__PURE__*/function () {\n          var _ref = _asyncToGenerator(function* (message) {\n            yield Dialog.alert({\n              title: 'Error Dialog',\n              message: message\n            });\n          });\n\n          return function showAlert(_x) {\n            return _ref.apply(this, arguments);\n          };\n        }();\n\n        try {\n          yield _this.runTest();\n          document.querySelector('.sql-allsuccess').classList.remove('display');\n          console.log(\"$$$ runTest was successful\");\n        } catch (err) {\n          document.querySelector('.sql-allfailure').classList.remove('display');\n          console.log(`$$$ runTest failed ${err.message}`);\n          yield showAlert(err.message);\n        }\n      })();\n    }\n\n    runTest() {\n      var _this2 = this;\n\n      return _asyncToGenerator(function* () {\n        try {\n          let result = yield _this2._sqlite.echo(\"Hello World\"); // ************************************************\n          // Create Database from imported Json\n          // ************************************************\n          // test Json object validity\n\n          result = yield _this2._sqlite.isJsonValid(JSON.stringify(dataToImport));\n\n          if (!result.result) {\n            return Promise.reject(new Error(\"IsJsonValid failed\"));\n          } // full import\n\n\n          result = yield _this2._sqlite.importFromJson(JSON.stringify(dataToImport));\n          if (result.changes.changes === -1) return Promise.reject(new Error(\"ImportFromJson 'full' dataToImport failed\")); // create the connection to the database\n\n          let db = yield _this2._sqlite.createConnection(\"db-from-json\", false, \"no-encryption\", 1);\n          if (db === null) return Promise.reject(new Error(\"CreateConnection 'db-from-json' failed\")); // open db \"db-from-json\"\n\n          yield db.open(); // create synchronization table \n\n          result = yield db.createSyncTable();\n          if (result.changes.changes < 0) return Promise.reject(new Error(\"CreateSyncTable failed\"));\n          result = yield db.getSyncDate();\n          if (result.length === 0) return Promise.reject(new Error(\"GetSyncDate failed\")); // select all users in db\n\n          result = yield db.query(\"SELECT * FROM users;\");\n\n          if (result.values.length !== 4 || result.values[0].name !== \"Whiteley\" || result.values[1].name !== \"Jones\" || result.values[2].name !== \"Simpson\" || result.values[3].name !== \"Brown\") {\n            return Promise.reject(new Error(\"Query 4 Users failed\"));\n          } // close the connection\n\n\n          yield _this2._sqlite.closeConnection(\"db-from-json\"); // partial import 1\n\n          result = yield _this2._sqlite.importFromJson(JSON.stringify(partialImport1));\n          if (result.changes.changes === -1) return Promise.reject(new Error(\"ImportFromJson 'partial' partialImport1 failed\")); // partial import 2\n\n          result = yield _this2._sqlite.importFromJson(JSON.stringify(partialImport2));\n          if (result.changes.changes === -1) return Promise.reject(new Error(\"ImportFromJson 'partial' partialImport2 failed\")); // partial import 3\n\n          result = yield _this2._sqlite.importFromJson(JSON.stringify(partialImport3));\n          if (result.changes.changes === -1) return Promise.reject(new Error(\"ImportFromJson 'partial' partialImport2 failed\")); // create the connection to the database\n\n          db = yield _this2._sqlite.createConnection(\"db-from-json\", false, \"no-encryption\", 1);\n          if (db === null) return Promise.reject(new Error(\"CreateConnection 'db-from-json' after 'partial' failed\")); // open db \"db-from-json\"\n\n          yield db.open();\n          result = yield db.getSyncDate();\n          if (result.length === 0) return Promise.reject(new Error(\"GetSyncDate failed\")); // select all users in db\n\n          result = yield db.query(\"SELECT * FROM users;\");\n\n          if (result.values.length !== 6 || result.values[0].name !== \"Whiteley\" || result.values[1].name !== \"Jones\" || result.values[2].name !== \"Simpson\" || result.values[3].name !== \"Brown\" || result.values[4].name !== \"Addington\" || result.values[5].name !== \"Bannister\") {\n            return Promise.reject(new Error(\"Query 6 Users failed\"));\n          } // select all messages in db\n\n\n          result = yield db.query(\"SELECT * FROM messages;\");\n\n          if (result.values.length !== 4 || result.values[0].title !== \"test post 1\" || result.values[1].title !== \"test post 2\" || result.values[2].title !== \"test post 3\" || result.values[3].title !== \"test post 4\") {\n            return Promise.reject(new Error(\"Query 4 Messages failed\"));\n          } // select all images in db\n\n\n          result = yield db.query(\"SELECT * FROM images;\");\n\n          if (result.values.length !== 2 || result.values[0].name !== \"feather\" || result.values[1].name !== \"meowth\") {\n            return Promise.reject(new Error(\"Query 2 Images failed\"));\n          } // close the connection\n\n\n          yield _this2._sqlite.closeConnection(\"db-from-json\");\n\n          _this2._detailService.setExportJson(true);\n\n          return Promise.resolve();\n        } catch (err) {\n          return Promise.reject(err);\n        }\n      })();\n    }\n\n  }\n\n  TestimportjsonPage.ɵfac = function TestimportjsonPage_Factory(t) {\n    return new (t || TestimportjsonPage)(i0.ɵɵdirectiveInject(i1.SQLiteService), i0.ɵɵdirectiveInject(i2.DetailService));\n  };\n\n  TestimportjsonPage.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: TestimportjsonPage,\n    selectors: [[\"app-testimportjson\"]],\n    decls: 19,\n    vars: 2,\n    consts: [[3, \"translucent\"], [\"slot\", \"start\"], [\"defaultHref\", \"/\"], [3, \"fullscreen\"], [\"collapse\", \"condense\"], [\"size\", \"large\"], [\"id\", \"container\"], [1, \"card-sqlite\"], [1, \"sql-allsuccess\", \"display\"], [1, \"sql-allfailure\", \"display\"]],\n    template: function TestimportjsonPage_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"ion-header\", 0);\n        i0.ɵɵelementStart(1, \"ion-toolbar\");\n        i0.ɵɵelementStart(2, \"ion-buttons\", 1);\n        i0.ɵɵelement(3, \"ion-back-button\", 2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"ion-title\");\n        i0.ɵɵtext(5, \" TestImportJson \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"ion-content\", 3);\n        i0.ɵɵelementStart(7, \"ion-header\", 4);\n        i0.ɵɵelementStart(8, \"ion-toolbar\");\n        i0.ɵɵelementStart(9, \"ion-title\", 5);\n        i0.ɵɵtext(10, \"TestImportJson\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(11, \"div\", 6);\n        i0.ɵɵelementStart(12, \"ion-card\", 7);\n        i0.ɵɵelementStart(13, \"ion-card-title\");\n        i0.ɵɵtext(14, \" Results of refactor sqlite test \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(15, \"p\", 8);\n        i0.ɵɵtext(16, \" The set of tests was successful \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(17, \"p\", 9);\n        i0.ɵɵtext(18, \" The set of tests failed \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"translucent\", true);\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"fullscreen\", true);\n      }\n    },\n    directives: [i3.IonHeader, i3.IonToolbar, i3.IonButtons, i3.IonBackButton, i3.IonBackButtonDelegate, i3.IonTitle, i3.IonContent, i3.IonCard, i3.IonCardTitle],\n    styles: [\"#container[_ngcontent-%COMP%]{text-align:center;position:relative;left:0;right:0;top:5%}#container[_ngcontent-%COMP%]   strong[_ngcontent-%COMP%]{font-size:20px;line-height:26px}.display[_ngcontent-%COMP%]{display:none}.card-sqlite[_ngcontent-%COMP%]{padding:0 1rem}ion-card[_ngcontent-%COMP%]   p[_ngcontent-%COMP%]{font-size:1rem}ion-card[_ngcontent-%COMP%]{--background: var(--ion-background-color);--color: var(--ion-text-color)}\"]\n  });\n  return TestimportjsonPage;\n})();","map":null,"metadata":{},"sourceType":"module"}