{"ast":null,"code":"import _asyncToGenerator from \"/Users/queaujeanpierre/Development/latest/angular-sqlite-app-starter/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { createSchema, twoUsers, twoTests } from '../utils/no-encryption-utils';\nimport { createSchemaContacts, setContacts } from '../utils/encrypted-set-utils';\nimport { deleteDatabase } from '../utils/db-utils';\nimport { Dialog } from '@capacitor/dialog';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/sqlite.service\";\nimport * as i2 from \"../services/detail.service\";\nimport * as i3 from \"@ionic/angular\";\nexport let TestIssue111Page = /*#__PURE__*/(() => {\n  class TestIssue111Page {\n    constructor(_sqlite, _detailService) {\n      this._sqlite = _sqlite;\n      this._detailService = _detailService;\n      this.detail = false;\n      this.initPlugin = false;\n    }\n\n    ngAfterViewInit() {\n      var _this = this;\n\n      return _asyncToGenerator(function* () {\n        const showAlert = /*#__PURE__*/function () {\n          var _ref = _asyncToGenerator(function* (message) {\n            yield Dialog.alert({\n              title: 'Error Dialog',\n              message: message\n            });\n          });\n\n          return function showAlert(_x) {\n            return _ref.apply(this, arguments);\n          };\n        }();\n\n        try {\n          yield _this.runTest();\n          document.querySelector('.sql-allsuccess').classList.remove('display');\n          console.log(\"$$$ runTest was successful\");\n        } catch (err) {\n          document.querySelector('.sql-allfailure').classList.remove('display');\n          console.log(`$$$ runTest failed ${err.message}`);\n          yield showAlert(err.message);\n        }\n      })();\n    }\n\n    runTest() {\n      var _this2 = this;\n\n      return _asyncToGenerator(function* () {\n        try {\n          let result = yield _this2._sqlite.echo(\"Hello World\");\n          var retDict = yield _this2._sqlite.retrieveAllConnections();\n          /*      if(retDict.size > 0) {\n                  for (var conn in retDict) {\n                    console.log(`connection: ${conn}`)\n                  }\n                }\n          */\n          // initialize the connection\n\n          let db;\n          let isConn = yield _this2._sqlite.isConnection(\"testIssue111.db\");\n\n          if (isConn.result) {\n            db = yield _this2._sqlite.retrieveConnection(\"testIssue111.db\");\n          } else db = yield _this2._sqlite.createConnection(\"testIssue111.db\", false, \"no-encryption\", 1);\n\n          let db1;\n\n          if ((yield _this2._sqlite.isConnection(\"testSetIssue111.db\")).result) {\n            db1 = yield _this2._sqlite.retrieveConnection(\"testSetIssue111.db\");\n          } else db1 = yield _this2._sqlite.createConnection(\"testSetIssue111.db\", true, \"secret\", 1); // check if the databases exist \n          // and delete it for multiple successive tests\n\n\n          yield deleteDatabase(db);\n          yield deleteDatabase(db1); // open db testNew\n\n          yield db.open(); // create tables in db\n\n          let ret = yield db.execute(createSchema, false);\n\n          if (ret.changes.changes < 0) {\n            return Promise.reject(new Error(\"Execute createSchema failed\"));\n          } // create synchronization table \n\n\n          ret = yield db.createSyncTable(); // set the synchronization date\n\n          const syncDate = \"2020-11-25T08:30:25.000Z\";\n          yield db.setSyncDate(syncDate); // add two users in db\n\n          ret = yield db.execute(twoUsers, false);\n\n          if (ret.changes.changes !== 2) {\n            return Promise.reject(new Error(\"Execute 2 users failed\"));\n          } // select all users in db\n\n\n          ret = yield db.query(\"SELECT * FROM users;\");\n\n          if (ret.values.length !== 2 || ret.values[0].name !== \"Whiteley\" || ret.values[1].name !== \"Jones\") {\n            return Promise.reject(new Error(\"Query 2 users failed\"));\n          } // open db testSet\n\n\n          yield db1.open(); // create tables in db1\n\n          ret = yield db1.execute(createSchemaContacts, false); // load setContacts in db1\n\n          ret = yield db1.executeSet(setContacts, false);\n\n          if (ret.changes.changes !== 5) {\n            return Promise.reject(new Error(\"ExecuteSet 5 contacts failed\"));\n          } // select users where company is NULL in db\n\n\n          ret = yield db.query(\"SELECT * FROM users WHERE company IS NULL;\");\n\n          if (ret.values.length !== 2 || ret.values[0].name !== \"Whiteley\" || ret.values[1].name !== \"Jones\") {\n            return Promise.reject(new Error(\"Query 2 users where company is null failed\"));\n          } // add one user with statement and values              \n\n\n          let sqlcmd = \"INSERT INTO users (name,email,age) VALUES (?,?,?)\";\n          let values = [\"Simpson\", \"Simpson@example.com\", 69];\n          ret = yield db.run(sqlcmd, values, false);\n\n          if (ret.changes.lastId !== 3) {\n            return Promise.reject(new Error(\"Run 1 users with statement & values failed\"));\n          } // add one user with statement              \n\n\n          sqlcmd = `INSERT INTO users (name,email,age) VALUES ` + `(\"Brown\",\"Brown@example.com\",15)`;\n          ret = yield db.run(sqlcmd, [], false);\n\n          if (ret.changes.lastId !== 4) {\n            return Promise.reject(new Error(\"Run 1 users with statement failed\"));\n          } // add some tests issue#56\n\n\n          ret = yield db.execute(twoTests, false);\n\n          if (ret.changes.changes !== 2) {\n            return Promise.reject(new Error(\"Execute issue#56 failed\"));\n          } // add one test\n\n\n          sqlcmd = \"INSERT INTO test56 (name) VALUES (?)\";\n          let vals = [\"test 3 added insert \"];\n          ret = yield db.run(sqlcmd, vals, false);\n\n          if (ret.changes.changes !== 1 || ret.changes.lastId !== 3) {\n            return Promise.reject(new Error(\"Run 1 test issue#56 failed\"));\n          } // add a null test\n\n\n          vals = [null];\n          ret = yield db.run(sqlcmd, vals, false);\n\n          if (ret.changes.changes !== 1 || ret.changes.lastId !== 4) {\n            return Promise.reject(new Error(\"Run 1 test null issue#56 failed\"));\n          } // add a another null test\n\n\n          vals = [];\n          ret = yield db.run(sqlcmd, vals, false);\n\n          if (ret.changes.changes !== 1 || ret.changes.lastId !== 5) {\n            return Promise.reject(new Error(\"Run another null test issue#56 failed\"));\n          } // add test [null, 'test2']\n\n\n          sqlcmd = \"INSERT INTO test56 (name,name1) VALUES (?,?)\";\n          vals = [null, 'test2'];\n          ret = yield db.run(sqlcmd, vals, false);\n\n          if (ret.changes.changes !== 1 || ret.changes.lastId !== 6) {\n            return Promise.reject(new Error(\"Run [null, 'test2'] test issue#56 failed\"));\n          }\n\n          ret = yield _this2._sqlite.checkConnectionsConsistency();\n          var retDict = yield _this2._sqlite.retrieveAllConnections();\n          /*      for (var conn in retDict) {\n                  console.log(`connection: ${conn}`)\n                }\n          */\n\n          return Promise.resolve();\n        } catch (err) {\n          return Promise.reject(err);\n        }\n      })();\n    }\n\n  }\n\n  TestIssue111Page.ɵfac = function TestIssue111Page_Factory(t) {\n    return new (t || TestIssue111Page)(i0.ɵɵdirectiveInject(i1.SQLiteService), i0.ɵɵdirectiveInject(i2.DetailService));\n  };\n\n  TestIssue111Page.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: TestIssue111Page,\n    selectors: [[\"app-testissue111\"]],\n    decls: 19,\n    vars: 2,\n    consts: [[3, \"translucent\"], [\"slot\", \"start\"], [\"defaultHref\", \"/\"], [3, \"fullscreen\"], [\"collapse\", \"condense\"], [\"size\", \"large\"], [\"id\", \"container\"], [1, \"card-sqlite\"], [1, \"sql-allsuccess\", \"display\"], [1, \"sql-allfailure\", \"display\"]],\n    template: function TestIssue111Page_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"ion-header\", 0);\n        i0.ɵɵelementStart(1, \"ion-toolbar\");\n        i0.ɵɵelementStart(2, \"ion-buttons\", 1);\n        i0.ɵɵelement(3, \"ion-back-button\", 2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"ion-title\");\n        i0.ɵɵtext(5, \" TestIssue111 \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"ion-content\", 3);\n        i0.ɵɵelementStart(7, \"ion-header\", 4);\n        i0.ɵɵelementStart(8, \"ion-toolbar\");\n        i0.ɵɵelementStart(9, \"ion-title\", 5);\n        i0.ɵɵtext(10, \"TestIssue111\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(11, \"div\", 6);\n        i0.ɵɵelementStart(12, \"ion-card\", 7);\n        i0.ɵɵelementStart(13, \"ion-card-title\");\n        i0.ɵɵtext(14, \" Results of refactor sqlite test \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(15, \"p\", 8);\n        i0.ɵɵtext(16, \" The set of tests was successful \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(17, \"p\", 9);\n        i0.ɵɵtext(18, \" The set of tests failed \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"translucent\", true);\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"fullscreen\", true);\n      }\n    },\n    directives: [i3.IonHeader, i3.IonToolbar, i3.IonButtons, i3.IonBackButton, i3.IonBackButtonDelegate, i3.IonTitle, i3.IonContent, i3.IonCard, i3.IonCardTitle],\n    styles: [\"#container[_ngcontent-%COMP%]{text-align:center;position:relative;left:0;right:0;top:5%}#container[_ngcontent-%COMP%]   strong[_ngcontent-%COMP%]{font-size:20px;line-height:26px}.display[_ngcontent-%COMP%]{display:none}.card-sqlite[_ngcontent-%COMP%]{padding:0 1rem}ion-card[_ngcontent-%COMP%]   p[_ngcontent-%COMP%]{font-size:1rem}ion-card[_ngcontent-%COMP%]{--background: var(--ion-background-color);--color: var(--ion-text-color)}\"]\n  });\n  return TestIssue111Page;\n})();","map":null,"metadata":{},"sourceType":"module"}