{"ast":null,"code":"import _asyncToGenerator from \"/Users/queaujeanpierre/Development/latest/angular-sqlite-app-starter/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { Dialog } from '@capacitor/dialog';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/sqlite.service\";\nimport * as i2 from \"../services/detail.service\";\nimport * as i3 from \"@ionic/angular\";\nexport let TestNCDbsPage = /*#__PURE__*/(() => {\n  class TestNCDbsPage {\n    constructor(_sqlite, _detailService) {\n      this._sqlite = _sqlite;\n      this._detailService = _detailService;\n      this.detail = false;\n      this.initPlugin = false;\n      this.platform = this._sqlite.platform;\n    }\n\n    ngAfterViewInit() {\n      var _this = this;\n\n      return _asyncToGenerator(function* () {\n        const showAlert = /*#__PURE__*/function () {\n          var _ref = _asyncToGenerator(function* (message) {\n            yield Dialog.alert({\n              title: 'Error Dialog',\n              message: message\n            });\n          });\n\n          return function showAlert(_x) {\n            return _ref.apply(this, arguments);\n          };\n        }();\n\n        try {\n          yield _this.runTest();\n          document.querySelector('.sql-allsuccess').classList.remove('display');\n          console.log(\"$$$ runTest was successful\");\n        } catch (err) {\n          document.querySelector('.sql-allfailure').classList.remove('display');\n          console.log(`$$$ runTest failed ${err.message}`);\n          yield showAlert(err.message);\n        }\n      })();\n    }\n\n    runTest() {\n      var _this2 = this;\n\n      return _asyncToGenerator(function* () {\n        try {\n          let result = yield _this2._sqlite.echo(\"Hello World from Jeep\");\n          console.log(`from echo: ${result.value}`);\n          let directory;\n          if (_this2.platform === \"ios\") directory = \"Applications/Files/Databases\";\n          if (_this2.platform === \"android\") directory = \"files/databases\";\n\n          if (_this2.platform === 'ios' || _this2.platform === 'android') {\n            const databasePath = (yield _this2._sqlite.getNCDatabasePath(directory, \"testncdb.db\")).path;\n            const isNCDbExists = (yield _this2._sqlite.isNCDatabase(databasePath)).result;\n            const ret = yield _this2._sqlite.checkConnectionsConsistency();\n            const isConn = (yield _this2._sqlite.isNCConnection(databasePath)).result;\n            let db;\n\n            if (ret.result && isConn && isNCDbExists) {\n              db = yield _this2._sqlite.retrieveNCConnection(databasePath);\n            } else {\n              db = yield _this2._sqlite.createNCConnection(databasePath, 1);\n            } // open db testncdb.db\n\n\n            yield db.open(); // get the database version\n\n            let retVer = yield db.getVersion();\n\n            if (retVer.version !== 1) {\n              return Promise.reject(new Error(\"GetVersion: version failed\"));\n            }\n\n            const isDbOpen = yield db.isDBOpen();\n            console.log(`$$$$ isDbOpen.result ${JSON.stringify(isDbOpen.result)}`);\n\n            if (!isDbOpen.result) {\n              return Promise.reject(new Error(\"IsDBOpen: database not opened\"));\n            }\n\n            const isTable = yield db.isTable(\"contacts\");\n            console.log(`$$$$ isTable.result ${JSON.stringify(isTable.result)}`);\n\n            if (!isTable.result) {\n              return Promise.reject(new Error(\"IsTable: table does not exist\"));\n            } // select all contacts in db\n\n\n            const retCts = yield db.query(\"SELECT * FROM contacts;\");\n\n            if (retCts.values.length !== 4 || retCts.values[0].name !== \"Simpson\" || retCts.values[1].name !== \"Jones\" || retCts.values[2].name !== \"Whiteley\" || retCts.values[3].name !== \"Brown\") {\n              return Promise.reject(new Error(\"Query Contacts failed\"));\n            }\n\n            yield _this2._sqlite.closeNCConnection(databasePath);\n            return Promise.resolve();\n          } else {\n            return Promise.reject(new Error(`Not implemented for ${_this2.platform} platform`));\n          }\n        } catch (err) {\n          return Promise.reject(err);\n        }\n      })();\n    }\n\n  }\n\n  TestNCDbsPage.ɵfac = function TestNCDbsPage_Factory(t) {\n    return new (t || TestNCDbsPage)(i0.ɵɵdirectiveInject(i1.SQLiteService), i0.ɵɵdirectiveInject(i2.DetailService));\n  };\n\n  TestNCDbsPage.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: TestNCDbsPage,\n    selectors: [[\"app-testncdbs\"]],\n    decls: 19,\n    vars: 2,\n    consts: [[3, \"translucent\"], [\"slot\", \"start\"], [\"defaultHref\", \"/\"], [3, \"fullscreen\"], [\"collapse\", \"condense\"], [\"size\", \"large\"], [\"id\", \"container\"], [1, \"card-sqlite\"], [1, \"sql-allsuccess\", \"display\"], [1, \"sql-allfailure\", \"display\"]],\n    template: function TestNCDbsPage_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"ion-header\", 0);\n        i0.ɵɵelementStart(1, \"ion-toolbar\");\n        i0.ɵɵelementStart(2, \"ion-buttons\", 1);\n        i0.ɵɵelement(3, \"ion-back-button\", 2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"ion-title\");\n        i0.ɵɵtext(5, \" Testncdbs \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"ion-content\", 3);\n        i0.ɵɵelementStart(7, \"ion-header\", 4);\n        i0.ɵɵelementStart(8, \"ion-toolbar\");\n        i0.ɵɵelementStart(9, \"ion-title\", 5);\n        i0.ɵɵtext(10, \"Testncdbs\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(11, \"div\", 6);\n        i0.ɵɵelementStart(12, \"ion-card\", 7);\n        i0.ɵɵelementStart(13, \"ion-card-title\");\n        i0.ɵɵtext(14, \" Results of refactor sqlite test \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(15, \"p\", 8);\n        i0.ɵɵtext(16, \" The set of tests was successful \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(17, \"p\", 9);\n        i0.ɵɵtext(18, \" The set of tests failed \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"translucent\", true);\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"fullscreen\", true);\n      }\n    },\n    directives: [i3.IonHeader, i3.IonToolbar, i3.IonButtons, i3.IonBackButton, i3.IonBackButtonDelegate, i3.IonTitle, i3.IonContent, i3.IonCard, i3.IonCardTitle],\n    styles: [\"#container[_ngcontent-%COMP%]{text-align:center;position:relative;left:0;right:0;top:5%}#container[_ngcontent-%COMP%]   strong[_ngcontent-%COMP%]{font-size:20px;line-height:26px}.display[_ngcontent-%COMP%]{display:none}.card-sqlite[_ngcontent-%COMP%]{padding:0 1rem}ion-card[_ngcontent-%COMP%]   p[_ngcontent-%COMP%]{font-size:1rem}ion-card[_ngcontent-%COMP%]{--background: var(--ion-background-color);--color: var(--ion-text-color)}\"]\n  });\n  return TestNCDbsPage;\n})();","map":null,"metadata":{},"sourceType":"module"}