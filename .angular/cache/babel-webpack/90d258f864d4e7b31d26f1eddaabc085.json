{"ast":null,"code":"import _asyncToGenerator from \"/Users/queaujeanpierre/Development/latest/angular-sqlite-app-starter/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { Dialog } from '@capacitor/dialog';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/sqlite.service\";\nimport * as i2 from \"../services/detail.service\";\nimport * as i3 from \"@ionic/angular\";\nexport let Testjson192Page = /*#__PURE__*/(() => {\n  class Testjson192Page {\n    constructor(_sqlite, _detailService) {\n      this._sqlite = _sqlite;\n      this._detailService = _detailService;\n      this.initPlugin = false;\n    }\n\n    ngAfterViewInit() {\n      var _this = this;\n\n      return _asyncToGenerator(function* () {\n        const showAlert = /*#__PURE__*/function () {\n          var _ref = _asyncToGenerator(function* (message) {\n            yield Dialog.alert({\n              title: 'Error Dialog',\n              message: message\n            });\n          });\n\n          return function showAlert(_x) {\n            return _ref.apply(this, arguments);\n          };\n        }();\n\n        try {\n          yield _this.runTest();\n          document.querySelector('.sql-allsuccess').classList.remove('display');\n          console.log(\"$$$ runTest was successful\");\n        } catch (err) {\n          document.querySelector('.sql-allfailure').classList.remove('display');\n          console.log(\"$$$ runTest failed\");\n          yield showAlert(err.message);\n        }\n      })();\n    }\n\n    runTest() {\n      var _this2 = this;\n\n      return _asyncToGenerator(function* () {\n        try {\n          let result = yield _this2._sqlite.echo(\"Hello World\");\n          const JSONSchema = {\n            database: 'storage-192',\n            version: 1,\n            encrypted: false,\n            mode: 'full',\n            tables: [{\n              name: 'routes',\n              schema: [{\n                column: 'id',\n                value: 'TEXT NOT NULL'\n              }, {\n                column: 'name',\n                value: 'TEXT NOT NULL'\n              }, {\n                column: 'date',\n                value: 'TEXT NOT NULL'\n              }, {\n                constraint: 'routes_pk',\n                value: 'PRIMARY KEY (id)'\n              }],\n              indexes: [{\n                name: 'routes_id_uindex',\n                value: 'id'\n              }, {\n                name: 'routes_name_uindex',\n                value: 'name'\n              }]\n            }, {\n              name: 'route_points',\n              schema: [{\n                column: 'id',\n                value: 'INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL'\n              }, {\n                column: 'route_id',\n                value: 'TEXT NOT NULL'\n              }, {\n                column: 'accuracy',\n                value: 'REAL'\n              }, {\n                column: 'altitude',\n                value: 'REAL'\n              }, {\n                column: 'altitudeAccuracy',\n                value: 'REAL'\n              }, {\n                column: 'heading',\n                value: 'REAL'\n              }, {\n                column: 'latitude',\n                value: 'REAL'\n              }, {\n                column: 'longitude',\n                value: 'REAL'\n              }, {\n                column: 'speed',\n                value: 'REAL'\n              }, {\n                column: 'TIMESTAMP',\n                value: 'INTEGER'\n              }, {\n                foreignkey: 'route_id',\n                value: 'REFERENCES routes(id) ON DELETE CASCADE'\n              }],\n              indexes: [{\n                name: 'route_points_id_uindex',\n                value: 'id'\n              }]\n            }]\n          }; // ************************************************\n          // Import Json Object Issue#71\n          // ************************************************\n          // test Json object validity\n\n          result = yield _this2._sqlite.isJsonValid(JSON.stringify(JSONSchema));\n\n          if (!result.result) {\n            return Promise.reject(new Error(\"IsJson failed\"));\n          } // full import\n\n\n          result = yield _this2._sqlite.importFromJson(JSON.stringify(JSONSchema));\n          if (result.changes.changes === -1) return Promise.reject(new Error(\"ImportFromJson 'full' failed\")); // ************************************************\n          // Query\n          // ************************************************\n          // create the connection to the database\n\n          let db = yield _this2._sqlite.createConnection(\"storage-192\", false, \"no-encryption\", 1);\n          if (db === null) return Promise.reject(new Error(\"CreateConnection storage-192 failed\")); // open db testNew\n\n          yield db.open();\n          const tableQuery = `SELECT name FROM sqlite_master WHERE type='table' AND name='routes';`;\n          const tableResult = yield db.query(tableQuery);\n\n          if (tableResult.values.length === 0) {\n            console.log('table bestaat niet');\n            const result = yield _this2._sqlite.isJsonValid(JSON.stringify(JSONSchema));\n            console.log(result);\n\n            if (!result.result) {\n              return Promise.reject(new Error(`isJsonValid: \"schemaToImport179\" is not valid`));\n            }\n\n            const resJson = yield _this2._sqlite.importFromJson(JSON.stringify(JSONSchema));\n            console.log(resJson);\n\n            if (resJson.changes && resJson.changes.changes && resJson.changes.changes < 0) {\n              return Promise.reject(new Error(`importFromJson: \"full\" failed`));\n            }\n          } // close the connection\n\n\n          yield _this2._sqlite.closeConnection(\"storage-192\");\n          return Promise.resolve();\n        } catch (err) {\n          return Promise.reject(err);\n        }\n      })();\n    }\n\n  }\n\n  Testjson192Page.ɵfac = function Testjson192Page_Factory(t) {\n    return new (t || Testjson192Page)(i0.ɵɵdirectiveInject(i1.SQLiteService), i0.ɵɵdirectiveInject(i2.DetailService));\n  };\n\n  Testjson192Page.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: Testjson192Page,\n    selectors: [[\"app-testjson192\"]],\n    decls: 19,\n    vars: 2,\n    consts: [[3, \"translucent\"], [\"slot\", \"start\"], [\"defaultHref\", \"/\"], [3, \"fullscreen\"], [\"collapse\", \"condense\"], [\"size\", \"large\"], [\"id\", \"container\"], [1, \"card-sqlite\"], [1, \"sql-allsuccess\", \"display\"], [1, \"sql-allfailure\", \"display\"]],\n    template: function Testjson192Page_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"ion-header\", 0);\n        i0.ɵɵelementStart(1, \"ion-toolbar\");\n        i0.ɵɵelementStart(2, \"ion-buttons\", 1);\n        i0.ɵɵelement(3, \"ion-back-button\", 2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"ion-title\");\n        i0.ɵɵtext(5, \" TestJson#192 \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"ion-content\", 3);\n        i0.ɵɵelementStart(7, \"ion-header\", 4);\n        i0.ɵɵelementStart(8, \"ion-toolbar\");\n        i0.ɵɵelementStart(9, \"ion-title\", 5);\n        i0.ɵɵtext(10, \"TestJson#192\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(11, \"div\", 6);\n        i0.ɵɵelementStart(12, \"ion-card\", 7);\n        i0.ɵɵelementStart(13, \"ion-card-title\");\n        i0.ɵɵtext(14, \" Results of refactor sqlite test \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(15, \"p\", 8);\n        i0.ɵɵtext(16, \" The set of tests was successful \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(17, \"p\", 9);\n        i0.ɵɵtext(18, \" The set of tests failed \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"translucent\", true);\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"fullscreen\", true);\n      }\n    },\n    directives: [i3.IonHeader, i3.IonToolbar, i3.IonButtons, i3.IonBackButton, i3.IonBackButtonDelegate, i3.IonTitle, i3.IonContent, i3.IonCard, i3.IonCardTitle],\n    styles: [\"#container[_ngcontent-%COMP%]{text-align:center;position:relative;left:0;right:0;top:5%}#container[_ngcontent-%COMP%]   strong[_ngcontent-%COMP%]{font-size:20px;line-height:26px}.display[_ngcontent-%COMP%]{display:none}.card-sqlite[_ngcontent-%COMP%]{padding:0 1rem}ion-card[_ngcontent-%COMP%]   p[_ngcontent-%COMP%]{font-size:1rem}ion-card[_ngcontent-%COMP%]{--background: var(--ion-background-color);--color: var(--ion-text-color)}\"]\n  });\n  return Testjson192Page;\n})();","map":null,"metadata":{},"sourceType":"module"}