{"ast":null,"code":"import _asyncToGenerator from \"/Users/queaujeanpierre/Development/latest/angular-sqlite-app-starter/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { createSchema82 } from '../utils/no-encryption-utils';\nimport { Dialog } from '@capacitor/dialog';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/sqlite.service\";\nimport * as i2 from \"../services/detail.service\";\nimport * as i3 from \"@ionic/angular\";\nexport let TestCopyPage = /*#__PURE__*/(() => {\n  class TestCopyPage {\n    constructor(_sqlite, _detailService) {\n      this._sqlite = _sqlite;\n      this._detailService = _detailService;\n      this.initPlugin = false;\n      this.platform = this._sqlite.platform;\n    }\n\n    ngAfterViewInit() {\n      var _this = this;\n\n      return _asyncToGenerator(function* () {\n        const showAlert = /*#__PURE__*/function () {\n          var _ref = _asyncToGenerator(function* (message) {\n            yield Dialog.alert({\n              title: 'Error Dialog',\n              message: message\n            });\n          });\n\n          return function showAlert(_x) {\n            return _ref.apply(this, arguments);\n          };\n        }(); // Initialize the CapacitorSQLite plugin\n\n\n        try {\n          yield _this.runTest();\n          document.querySelector('.sql-allsuccess').classList.remove('display');\n          console.log(\"$$$ runTest was successful\");\n        } catch (err) {\n          document.querySelector('.sql-allfailure').classList.remove('display');\n          console.log(\"$$$ runTest failed\");\n          yield showAlert(err.message);\n        }\n      })();\n    }\n\n    runTest() {\n      var _this2 = this;\n\n      return _asyncToGenerator(function* () {\n        try {\n          let result = yield _this2._sqlite.echo(\"Hello World\"); // ************************************************\n          // Test isConnection, isDatabase, isTable,\n          //      getDatabaseList, addSQLiteSuffix\n          // ************************************************\n\n          result = yield _this2._sqlite.isConnection(\"testcopy\");\n\n          if (result.result) {\n            return Promise.reject(new Error(\"Connection 'testcopy' already exists\"));\n          } // test get the Database List\n\n\n          result = yield _this2._sqlite.getDatabaseList();\n          console.log(`test get Database List: ${JSON.stringify(result)}`);\n          result = yield _this2._sqlite.isConnection(\"testfromfile\");\n\n          if (result.result) {\n            return Promise.reject(new Error(\"Connection 'testfromfile' already exists\"));\n          }\n\n          result = yield _this2._sqlite.isConnection(\"keep1\");\n\n          if (result.result) {\n            return Promise.reject(new Error(\"Connection 'keep1' already exists\"));\n          } // test if the cordova databases where not at the \"default\" directory\n          // here we assume that they were stored at \"Files/Databases\"\n\n\n          let directory = \"Files/Databases\";\n          let dbList = [\"testcopy.db\", \"testfromfile.db\", \"keep1\"];\n          if (_this2.platform === \"ios\") directory = \"Applications/Files/Databases\";\n          if (_this2.platform === \"android\") directory = \"files/databases\";\n\n          if (_this2.platform === 'ios' || _this2.platform === 'android') {\n            const dbMigratableList = yield _this2._sqlite.getMigratableDbList(directory);\n            console.log(`dbMigratableList ${JSON.stringify(dbMigratableList)}`);\n\n            if (dbMigratableList.values.length != 4) {\n              return Promise.reject(new Error(\"GetMigratableDbList failed\"));\n            }\n\n            yield _this2._sqlite.addSQLiteSuffix(directory, dbList);\n          } // check if database \"testcopy\" exists\n\n\n          result = yield _this2._sqlite.isDatabase(\"testcopy\");\n\n          if (!result.result) {\n            return Promise.reject(new Error(\"Database 'testcopy' does not exist\"));\n          } // check if database \"testfromfile\" exists\n\n\n          result = yield _this2._sqlite.isDatabase(\"testfromfile\");\n\n          if (!result.result) {\n            return Promise.reject(new Error(\"Database 'testfromfile' does not exist\"));\n          } // check if database \"keep1\" exists\n\n\n          result = yield _this2._sqlite.isDatabase(\"keep1\");\n\n          if (!result.result) {\n            return Promise.reject(new Error(\"Database 'keep1' does not exist\"));\n          } // ************************************************\n          // Query the database\n          // ************************************************\n          // create the connection to the database\n\n\n          const db = yield _this2._sqlite.createConnection(\"testcopy\", false, \"no-encryption\", 1);\n          if (db === null) return Promise.reject(new Error(\"CreateConnection 'testcopy' failed\")); // open db testcopy\n\n          yield db.open(); // \n          // select all users in db\n\n          result = yield db.query(\"SELECT * FROM users;\");\n\n          if (result.values.length !== 7 || result.values[0].name !== \"Whiteley\" || result.values[1].name !== \"Jones\" || result.values[2].name !== \"Simpson\" || result.values[3].name !== \"Brown\" || result.values[4].name !== \"Jackson\" || result.values[5].name !== \"Kennedy\" || result.values[6].name !== \"Bush\") {\n            return Promise.reject(new Error(\"Query Users failed\"));\n          } // check if the table \"users\" exists\n\n\n          result = yield db.isTable(\"users\");\n\n          if (!result.result) {\n            return Promise.reject(new Error(\"Table 'users' does not exist\"));\n          } // check if the table \"messages\" exists\n\n\n          result = yield db.isTable(\"messages\");\n\n          if (!result.result) {\n            return Promise.reject(new Error(\"Table 'messages' does not exist\"));\n          } // check if the table \"images\" exists\n\n\n          result = yield db.isTable(\"images\");\n\n          if (!result.result) {\n            return Promise.reject(new Error(\"Table 'images' does not exist\"));\n          } // check if the table \"foo\" exists\n\n\n          result = yield db.isTable(\"foo\");\n\n          if (result.result) {\n            return Promise.reject(new Error(\"Table 'foo' exists\"));\n          } // create the connection to the database \"testfromfile\"\n\n\n          const db1 = yield _this2._sqlite.createConnection(\"testfromfile\", false, \"no-encryption\", 1);\n          if (db1 === null) return Promise.reject(new Error(\"CreateConnection 'testfromfile' failed\")); // open db testcopy\n\n          yield db1.open(); // check if the table \"users\" exists\n\n          result = yield db1.isTable(\"users\");\n\n          if (!result.result) {\n            return Promise.reject(new Error(\"Table 'users' does not exist\"));\n          } // select all users in db\n\n\n          result = yield db1.query(\"SELECT * FROM users;\");\n\n          if (result.values.length !== 7 || result.values[0].name !== \"Whiteley\" || result.values[1].name !== \"Jones\" || result.values[2].name !== \"Simpson\" || result.values[3].name !== \"Brown\" || result.values[4].name !== \"Jackson\" || result.values[5].name !== \"Kennedy\" || result.values[6].name !== \"Bush\") {\n            return Promise.reject(new Error(\"Query2 Users failed\"));\n          } // create the connection to the database\n\n\n          const db2 = yield _this2._sqlite.createConnection(\"keep1\", false, \"no-encryption\", 1);\n          if (db2 === null) return Promise.reject(new Error(\"CreateConnection 'keep1' failed\")); // open db testcopy\n\n          yield db2.open(); // \n          // select all users in db2\n\n          result = yield db2.query(\"SELECT * FROM users;\");\n\n          if (result.values.length !== 7 || result.values[0].name !== \"Whiteley\" || result.values[1].name !== \"Jones\" || result.values[2].name !== \"Simpson\" || result.values[3].name !== \"Brown\" || result.values[4].name !== \"Jackson\" || result.values[5].name !== \"Kennedy\" || result.values[6].name !== \"Bush\") {\n            return Promise.reject(new Error(\"Query db2 Users failed\"));\n          } // delete old databases\n\n\n          yield _this2._sqlite.deleteOldDatabases(directory, dbList);\n\n          if (_this2.platform === 'ios' || _this2.platform === 'android') {\n            const dbMigratableList = yield _this2._sqlite.getMigratableDbList(directory);\n\n            if (dbMigratableList.values.length != 1) {\n              return Promise.reject(new Error(\"GetMigratableDbList failed\"));\n            }\n          } // initialize the connection for issue#82\n\n\n          const db3 = yield _this2._sqlite.createConnection(\"test-issue82\", false, \"no-encryption\", 1); // open db3 test-issue82\n\n          yield db3.open(); // create tables in db2\n\n          result = yield db3.execute(createSchema82);\n\n          if (result.changes.changes < 0) {\n            return Promise.reject(new Error(\"Execute in db2 failed\"));\n          } // select all users in db\n\n\n          result = yield db3.query(\"SELECT * FROM drawings WHERE congregationId = '494f7713-4dfe-4a92-b1a9-75aadcd71022';\");\n\n          if (result.values.length !== 0) {\n            return Promise.reject(new Error(\"Query in db2 failed\"));\n          } // close the connection \"testcopy\"\n\n\n          yield _this2._sqlite.closeConnection(\"testcopy\");\n\n          _this2._detailService.setExportJson(false); // close the connection \"testfromfile\"\n\n\n          yield _this2._sqlite.closeConnection(\"testfromfile\"); // close the connection \"keep1\"\n\n          yield _this2._sqlite.closeConnection(\"keep1\"); // close the connection \"test-issue82\"\n\n          yield _this2._sqlite.closeConnection(\"test-issue82\");\n          return Promise.resolve();\n        } catch (err) {\n          return Promise.reject(err);\n        }\n      })();\n    }\n\n  }\n\n  TestCopyPage.ɵfac = function TestCopyPage_Factory(t) {\n    return new (t || TestCopyPage)(i0.ɵɵdirectiveInject(i1.SQLiteService), i0.ɵɵdirectiveInject(i2.DetailService));\n  };\n\n  TestCopyPage.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: TestCopyPage,\n    selectors: [[\"app-testcopy\"]],\n    decls: 19,\n    vars: 2,\n    consts: [[3, \"translucent\"], [\"slot\", \"start\"], [\"defaultHref\", \"/\"], [3, \"fullscreen\"], [\"collapse\", \"condense\"], [\"size\", \"large\"], [\"id\", \"container\"], [1, \"card-sqlite\"], [1, \"sql-allsuccess\", \"display\"], [1, \"sql-allfailure\", \"display\"]],\n    template: function TestCopyPage_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"ion-header\", 0);\n        i0.ɵɵelementStart(1, \"ion-toolbar\");\n        i0.ɵɵelementStart(2, \"ion-buttons\", 1);\n        i0.ɵɵelement(3, \"ion-back-button\", 2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"ion-title\");\n        i0.ɵɵtext(5, \" Test Migrate Copy \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"ion-content\", 3);\n        i0.ɵɵelementStart(7, \"ion-header\", 4);\n        i0.ɵɵelementStart(8, \"ion-toolbar\");\n        i0.ɵɵelementStart(9, \"ion-title\", 5);\n        i0.ɵɵtext(10, \"Test Migrate Copy\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(11, \"div\", 6);\n        i0.ɵɵelementStart(12, \"ion-card\", 7);\n        i0.ɵɵelementStart(13, \"ion-card-title\");\n        i0.ɵɵtext(14, \" Results of refactor sqlite test \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(15, \"p\", 8);\n        i0.ɵɵtext(16, \" The set of tests was successful \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(17, \"p\", 9);\n        i0.ɵɵtext(18, \" The set of tests failed \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"translucent\", true);\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"fullscreen\", true);\n      }\n    },\n    directives: [i3.IonHeader, i3.IonToolbar, i3.IonButtons, i3.IonBackButton, i3.IonBackButtonDelegate, i3.IonTitle, i3.IonContent, i3.IonCard, i3.IonCardTitle],\n    styles: [\"#container[_ngcontent-%COMP%]{text-align:center;position:relative;left:0;right:0;top:5%}#container[_ngcontent-%COMP%]   strong[_ngcontent-%COMP%]{font-size:20px;line-height:26px}.display[_ngcontent-%COMP%]{display:none}.card-sqlite[_ngcontent-%COMP%]{padding:0 1rem}ion-card[_ngcontent-%COMP%]   p[_ngcontent-%COMP%]{font-size:1rem}ion-card[_ngcontent-%COMP%]{--background: var(--ion-background-color);--color: var(--ion-text-color)}\"]\n  });\n  return TestCopyPage;\n})();","map":null,"metadata":{},"sourceType":"module"}