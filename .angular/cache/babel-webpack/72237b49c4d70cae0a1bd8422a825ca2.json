{"ast":null,"code":"import _asyncToGenerator from \"/Users/queaujeanpierre/Development/latest/angular-sqlite-app-starter/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { Dialog } from '@capacitor/dialog';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/sqlite.service\";\nimport * as i2 from \"@ionic/angular\";\nexport let CopyfromassetsPage = /*#__PURE__*/(() => {\n  class CopyfromassetsPage {\n    constructor(_sqlite) {\n      this._sqlite = _sqlite;\n      this.log = \"\";\n      this.initPlugin = false;\n      this.platform = this._sqlite.platform;\n    }\n\n    ngAfterViewInit() {\n      var _this = this;\n\n      return _asyncToGenerator(function* () {\n        const showAlert = /*#__PURE__*/function () {\n          var _ref = _asyncToGenerator(function* (message) {\n            yield Dialog.alert({\n              title: 'Error Dialog',\n              message: message\n            });\n          });\n\n          return function showAlert(_x) {\n            return _ref.apply(this, arguments);\n          };\n        }();\n\n        try {\n          yield _this.runTest();\n          document.querySelector('.sql-allsuccess').classList.remove('display');\n          console.log(\"$$$ runTest was successful\");\n        } catch (err) {\n          document.querySelector('.sql-allfailure').classList.remove('display');\n          console.log(`$$$ runTest failed ${err.message}`);\n          yield showAlert(err.message);\n        }\n      })();\n    }\n\n    runTest() {\n      var _this2 = this;\n\n      return _asyncToGenerator(function* () {\n        try {\n          _this2.log += \"* Starting testDatabaseCopyFromAssets *\\n\";\n          let result = yield _this2._sqlite.echo(\"Hello World\");\n          yield _this2._sqlite.copyFromAssets();\n          _this2.log += \"  > copyFromAssets successful\\n\"; // create a connection for myDB\n\n          let db = yield _this2._sqlite.createConnection(\"myDB\", false, \"no-encryption\", 1);\n          if (db == null) return Promise.reject(new Error(\"createConnection myDB failed\"));\n          _this2.log += \"  > createConnection 'myDb' successful\\n\";\n          yield db.open();\n          _this2.log += \"  > open 'myDb' successful\\n\"; // Select all Users\n\n          let res = yield db.query(\"SELECT * FROM users\");\n          if (res.values.length !== 7 || res.values[0].name !== \"Whiteley\" || res.values[1].name !== \"Jones\" || res.values[2].name !== \"Simpson\" || res.values[3].name !== \"Brown\" || res.values[4].name !== \"Jackson\" || res.values[5].name !== \"Kennedy\" || res.values[6].name !== \"Bush\") return Promise.reject(new Error(\"Query 7 users failed\"));\n          _this2.log += \"  > query 'myDb' successful\\n\"; // Close Connection MyDB        \n\n          yield _this2._sqlite.closeConnection(\"myDB\");\n          _this2.log += \"  > closeConnection 'myDb' successful\\n\"; // create a connection for dbForCopy\n\n          db = yield _this2._sqlite.createConnection(\"dbForCopy\", false, \"no-encryption\", 1);\n          if (db == null) return Promise.reject(new Error(\"createConnection dbForCopy failed\"));\n          _this2.log += \"  > createConnection 'dbForCopy' successful\\n\";\n          yield db.open();\n          _this2.log += \"  > open 'dbForCopy' successful\\n\"; // Select all Users\n\n          res = yield db.query(\"SELECT * FROM areas\");\n          if (res.values.length !== 3 || res.values[0].name !== \"Access road\" || res.values[1].name !== \"Accessway\" || res.values[2].name !== \"Air handling system\") return Promise.reject(new Error(\"Query 3 areas failed\"));\n          _this2.log += \"  > query 'dbForCopy' successful\\n\"; // Close Connection dbForCopy       \n\n          yield _this2._sqlite.closeConnection(\"dbForCopy\");\n          _this2.log += \"  > closeConnection 'dbForCopy' successful\\n\";\n          _this2.log += \"* Ending testDatabaseCopyFromAssets *\\n\";\n          return Promise.resolve();\n        } catch (err) {\n          return Promise.reject(err);\n        }\n      })();\n    }\n\n  }\n\n  CopyfromassetsPage.ɵfac = function CopyfromassetsPage_Factory(t) {\n    return new (t || CopyfromassetsPage)(i0.ɵɵdirectiveInject(i1.SQLiteService));\n  };\n\n  CopyfromassetsPage.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CopyfromassetsPage,\n    selectors: [[\"app-copyfromassets\"]],\n    decls: 25,\n    vars: 3,\n    consts: [[3, \"translucent\"], [\"slot\", \"start\"], [\"defaultHref\", \"/\"], [3, \"fullscreen\"], [\"collapse\", \"condense\"], [\"size\", \"large\"], [\"id\", \"container\"], [1, \"card-sqlite\"], [1, \"sql-allsuccess\", \"display\"], [1, \"sql-allfailure\", \"display\"]],\n    template: function CopyfromassetsPage_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"ion-header\", 0);\n        i0.ɵɵelementStart(1, \"ion-toolbar\");\n        i0.ɵɵelementStart(2, \"ion-buttons\", 1);\n        i0.ɵɵelement(3, \"ion-back-button\", 2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"ion-title\");\n        i0.ɵɵtext(5, \" Copyfromassets \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"ion-content\", 3);\n        i0.ɵɵelementStart(7, \"ion-header\", 4);\n        i0.ɵɵelementStart(8, \"ion-toolbar\");\n        i0.ɵɵelementStart(9, \"ion-title\", 5);\n        i0.ɵɵtext(10, \"Copyfromassets\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(11, \"div\", 6);\n        i0.ɵɵelementStart(12, \"ion-card\", 7);\n        i0.ɵɵelementStart(13, \"ion-card-title\");\n        i0.ɵɵtext(14, \" Results of refactor sqlite test \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(15, \"ion-card-content\");\n        i0.ɵɵelementStart(16, \"pre\");\n        i0.ɵɵtext(17, \"          \");\n        i0.ɵɵelementStart(18, \"p\");\n        i0.ɵɵtext(19);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(20, \"\\n        \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(21, \"p\", 8);\n        i0.ɵɵtext(22, \" The set of tests was successful \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(23, \"p\", 9);\n        i0.ɵɵtext(24, \" The set of tests failed \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"translucent\", true);\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"fullscreen\", true);\n        i0.ɵɵadvance(13);\n        i0.ɵɵtextInterpolate(ctx.log);\n      }\n    },\n    directives: [i2.IonHeader, i2.IonToolbar, i2.IonButtons, i2.IonBackButton, i2.IonBackButtonDelegate, i2.IonTitle, i2.IonContent, i2.IonCard, i2.IonCardTitle, i2.IonCardContent],\n    styles: [\"#container[_ngcontent-%COMP%]{text-align:center;position:relative;left:0;right:0;top:5%}#container[_ngcontent-%COMP%]   strong[_ngcontent-%COMP%]{font-size:20px;line-height:26px}.display[_ngcontent-%COMP%]{display:none}.card-sqlite[_ngcontent-%COMP%]{padding:0 1rem}ion-card[_ngcontent-%COMP%]   p[_ngcontent-%COMP%]{font-size:1rem}ion-card[_ngcontent-%COMP%]{--background: var(--ion-background-color);--color: var(--ion-text-color)}ion-card-content[_ngcontent-%COMP%]{text-align:left;position:relative;left:2px;right:2px;top:10px}\"]\n  });\n  return CopyfromassetsPage;\n})();","map":null,"metadata":{},"sourceType":"module"}